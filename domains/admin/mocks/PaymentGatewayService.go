// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	entities "github.com/Capstone-Project-Kelompok-39-alta/Backend-Capstone-Alta-Golang/entities"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	xendit "github.com/xendit/xendit-go"
)

// PaymentGatewayService is an autogenerated mock type for the PaymentGatewayService type
type PaymentGatewayService struct {
	mock.Mock
}

// CallbackXenditPaymentInvoiceService provides a mock function with given fields: invoice
func (_m *PaymentGatewayService) CallbackXenditPaymentInvoiceService(invoice entities.CallbackInvoice) error {
	ret := _m.Called(invoice)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.CallbackInvoice) error); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateXenditPaymentInvoiceService provides a mock function with given fields: id
func (_m *PaymentGatewayService) CreateXenditPaymentInvoiceService(id int) (*xendit.Invoice, error) {
	ret := _m.Called(id)

	var r0 *xendit.Invoice
	if rf, ok := ret.Get(0).(func(int) *xendit.Invoice); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*xendit.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpireXenditPaymentInvoiceService provides a mock function with given fields: _a0
func (_m *PaymentGatewayService) ExpireXenditPaymentInvoiceService(_a0 int) (*xendit.Invoice, error) {
	ret := _m.Called(_a0)

	var r0 *xendit.Invoice
	if rf, ok := ret.Get(0).(func(int) *xendit.Invoice); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*xendit.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllXenditPaymentInvoiceService provides a mock function with given fields:
func (_m *PaymentGatewayService) GetAllXenditPaymentInvoiceService() ([]xendit.Invoice, error) {
	ret := _m.Called()

	var r0 []xendit.Invoice
	if rf, ok := ret.Get(0).(func() []xendit.Invoice); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]xendit.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetXenditPaymentInvoiceService provides a mock function with given fields: id
func (_m *PaymentGatewayService) GetXenditPaymentInvoiceService(id int) (*xendit.Invoice, error) {
	ret := _m.Called(id)

	var r0 *xendit.Invoice
	if rf, ok := ret.Get(0).(func(int) *xendit.Invoice); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*xendit.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentGatewayService creates a new instance of PaymentGatewayService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaymentGatewayService(t testing.TB) *PaymentGatewayService {
	mock := &PaymentGatewayService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
