// Code generated by mockery v2.12.2. DO NOT EDIT.

package payment_status

import (
	entities "github.com/Capstone-Project-Kelompok-39-alta/Backend-Capstone-Alta-Golang/entities"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// PaymentStatusRepository is an autogenerated mock type for the PaymentStatusRepository type
type PaymentStatusRepository struct {
	mock.Mock
}

// CreateInvoicePaymentStatus provides a mock function with given fields: payment
func (_m *PaymentStatusRepository) CreateInvoicePaymentStatus(payment entities.InvoicePaymentStatus) error {
	ret := _m.Called(payment)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.InvoicePaymentStatus) error); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInvoicePaymentStatusByID provides a mock function with given fields: id
func (_m *PaymentStatusRepository) DeleteInvoicePaymentStatusByID(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllInvoicesPaymentStatus provides a mock function with given fields:
func (_m *PaymentStatusRepository) GetAllInvoicesPaymentStatus() []entities.InvoicePaymentStatus {
	ret := _m.Called()

	var r0 []entities.InvoicePaymentStatus
	if rf, ok := ret.Get(0).(func() []entities.InvoicePaymentStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.InvoicePaymentStatus)
		}
	}

	return r0
}

// GetInvoicePaymentStatusByID provides a mock function with given fields: id
func (_m *PaymentStatusRepository) GetInvoicePaymentStatusByID(id int) (entities.InvoicePaymentStatus, error) {
	ret := _m.Called(id)

	var r0 entities.InvoicePaymentStatus
	if rf, ok := ret.Get(0).(func(int) entities.InvoicePaymentStatus); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.InvoicePaymentStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInvoicePaymentStatusByID provides a mock function with given fields: id, payment
func (_m *PaymentStatusRepository) UpdateInvoicePaymentStatusByID(id int, payment entities.InvoicePaymentStatus) error {
	ret := _m.Called(id, payment)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, entities.InvoicePaymentStatus) error); ok {
		r0 = rf(id, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentStatusRepository creates a new instance of PaymentStatusRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaymentStatusRepository(t testing.TB) *PaymentStatusRepository {
	mock := &PaymentStatusRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
