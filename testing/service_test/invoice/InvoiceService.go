// Code generated by mockery v2.12.2. DO NOT EDIT.

package invoice

import (
	entities "github.com/Capstone-Project-Kelompok-39-alta/Backend-Capstone-Alta-Golang/entities"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// InvoiceService is an autogenerated mock type for the InvoiceService type
type InvoiceService struct {
	mock.Mock
}

// CreateInvoiceService provides a mock function with given fields: invoice
func (_m *InvoiceService) CreateInvoiceService(invoice entities.Invoice) error {
	ret := _m.Called(invoice)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Invoice) error); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllInvoiceService provides a mock function with given fields:
func (_m *InvoiceService) GetAllInvoiceService() ([]entities.Invoice, error) {
	ret := _m.Called()

	var r0 []entities.Invoice
	if rf, ok := ret.Get(0).(func() []entities.Invoice); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceUserService provides a mock function with given fields: id
func (_m *InvoiceService) GetInvoiceUserService(id int) (entities.Invoice, error) {
	ret := _m.Called(id)

	var r0 entities.Invoice
	if rf, ok := ret.Get(0).(func(int) entities.Invoice); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Invoice)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInvoiceService creates a new instance of InvoiceService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewInvoiceService(t testing.TB) *InvoiceService {
	mock := &InvoiceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
